Author: pasdVn <pasdVn3@gmx.de>
Origin: http://sourceforge.net/p/minidlna/patches/77/
Bug-Debian: https://bugs.debian.org/749090
Last-Update: 2015-03-09
Subject: [PATCH] Fixed a problem when SSDP-multicast come from a different
 subnet than the interface is part of.

 - rely onto the mechanisms of the kernel, to filter out multicasts from not activated interfaces
 - get the interface-adress (the adress of the interface, we received the multicast) by the sockopt IP_PKTINFO

Index: minidlna/minissdp.c
===================================================================
--- minidlna.orig/minissdp.c	2015-03-10 02:35:58.204650407 +0300
+++ minidlna/minissdp.c	2015-03-10 02:42:20.583782260 +0300
@@ -73,6 +73,10 @@
 	imr.imr_multiaddr.s_addr = inet_addr(SSDP_MCAST_ADDR);
 	imr.imr_interface.s_addr = iface->addr.s_addr;
 #endif
+	/* Setting the socket options will guarantee, tha we will only receive
+	 * multicast traffic on a specific Interface.
+	 * In addition the kernel is instructed to send an igmp message (choose
+	 * mcast group) on the specific interface/subnet. */
 	ret = setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, (void *)&imr, sizeof(imr));
 	if (ret < 0 && errno != EADDRINUSE)
 	{
@@ -102,12 +106,18 @@
 
 	if (setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &i, sizeof(i)) < 0)
 		DPRINTF(E_WARN, L_SSDP, "setsockopt(udp, SO_REUSEADDR): %s\n", strerror(errno));
+
+	if (setsockopt(s, IPPROTO_IP, IP_PKTINFO, &i, sizeof(i)) < 0)
+		DPRINTF(E_WARN, L_SSDP, "setsockopt(udp, IP_PKTINFO): %s\n", strerror(errno));
 	
 	memset(&sockname, 0, sizeof(struct sockaddr_in));
 	sockname.sin_family = AF_INET;
 	sockname.sin_port = htons(SSDP_PORT);
-	/* NOTE : it seems it doesnt work when binding on the specific address */
-	sockname.sin_addr.s_addr = htonl(INADDR_ANY);
+	/* NOTE: Binding a socket to a UDP multicast address means, that we just want
+	 * to receive datagramms send to this multicast address.
+	 * To specify the local nics we want to use we have to use setsockopt,
+	 * see AddMulticastMembership(...). */
+	sockname.sin_addr.s_addr = inet_addr(SSDP_MCAST_ADDR);
 
 	if (bind(s, (struct sockaddr *)&sockname, sizeof(struct sockaddr_in)) < 0)
 	{
@@ -476,15 +486,25 @@
 {
 	int n;
 	char bufr[1500];
-	socklen_t len_r;
+	char cmbuf[1500];
 	struct sockaddr_in sendername;
 	int i;
 	char *st = NULL, *mx = NULL, *man = NULL, *mx_end = NULL;
 	int man_len = 0;
-	len_r = sizeof(struct sockaddr_in);
+	struct iovec iovec = {
+		.iov_base = bufr,
+		.iov_len = sizeof(bufr)-1
+	};
+	struct msghdr mh = {
+		.msg_name = &sendername,
+		.msg_namelen = sizeof(struct sockaddr_in),
+		.msg_iov = &iovec,
+		.msg_iovlen = 1,
+		.msg_control = cmbuf,
+		.msg_controllen = sizeof(cmbuf)
+	};
 
-	n = recvfrom(s, bufr, sizeof(bufr)-1, 0,
-	             (struct sockaddr *)&sendername, &len_r);
+	n = recvmsg(s, &mh, 0);
 	if (n < 0)
 	{
 		DPRINTF(E_ERROR, L_SSDP, "recvfrom(udp): %s\n", strerror(errno));
@@ -624,23 +644,24 @@
 		else if (st && (st_len > 0))
 		{
 			int l;
-			int iface = 0;
-			/* find in which sub network the client is */
-			for (i = 0; i < n_lan_addr; i++)
-			{
-				if((sendername.sin_addr.s_addr & lan_addr[i].mask.s_addr) ==
-				   (lan_addr[i].addr.s_addr & lan_addr[i].mask.s_addr))
-				{
-					iface = i;
-					break;
-				}
-			}
-			if (n_lan_addr == i)
-			{
-				DPRINTF(E_DEBUG, L_SSDP, "Ignoring SSDP M-SEARCH on other interface [%s]\n",
-					inet_ntoa(sendername.sin_addr));
-				return;
-			}
+			char host[40];
+			struct cmsghdr *cmsg;
+
+			// find the interface we received the msg from
+			for ( cmsg = CMSG_FIRSTHDR(&mh);
+				  cmsg != NULL;
+				  cmsg = CMSG_NXTHDR(&mh, cmsg))
+ 			{
+				// ignore the control headers that don't match what we want
+				if (cmsg->cmsg_level != IPPROTO_IP ||
+					cmsg->cmsg_type != IP_PKTINFO)
+					continue;
+
+				struct in_addr hostInAddr;
+				struct in_pktinfo *pi = (struct in_pktinfo*) CMSG_DATA(cmsg);
+				hostInAddr = pi->ipi_spec_dst;
+				inet_ntop(AF_INET, &hostInAddr, host, sizeof(host));
+ 			}
 			DPRINTF(E_DEBUG, L_SSDP, "SSDP M-SEARCH from %s:%d ST: %.*s, MX: %.*s, MAN: %.*s\n",
 				inet_ntoa(sendername.sin_addr),
 				ntohs(sendername.sin_port),
@@ -675,7 +696,7 @@
 				}
 				_usleep(random()>>20);
 				SendSSDPResponse(s, sendername, i,
-						lan_addr[iface].str, port);
+						host, port);
 				return;
 			}
 			/* Responds to request with ST: ssdp:all */
@@ -686,7 +707,7 @@
 				{
 					l = strlen(known_service_types[i]);
 					SendSSDPResponse(s, sendername, i,
-							lan_addr[iface].str, port);
+							host, port);
 				}
 			}
 		}
